bit alocation	

0 0 S S S D D D		move-8
0 1 O O O D D D		alu
1 0 0 0 S S S D		move-16
1 0 0 1 N Z O F		jump
1 0 1 0 0 D D D		set-8
1 0 1 0 1 D D D		load
1 0 1 1 0 S S S		store
1 0 1 1 1 0 D D    	set-16
1 0 1 1 1 1 O O		call


move-8
	0 0 S S S D D D
	[A, B, C, D, M1, M2, X, Y] -> [A, B, C, D, X, Y, M1, M2]
	[PC] += 1
	S S S Source register	|	D D D Destination register
		0 0 0 	A			|	0 0 0	A
		0 0 1 	B			|	0 0 1	B
		0 1 0 	C			|	0 1 0	C
		0 1 1 	D			|	0 1 1	D
		1 0 0	X			|	1 0 0	X
		1 0 1	Y			|	1 0 1	Y
		1 1 0	M1			|	1 1 0	M1
		1 1 1	M2			|	1 1 1	M2
	Note when SSS and DDD are the same the register will be cleared

load
	1 0 1 0 1 D D D
	[mem(M)] -> [A, B, C, D, X, Y, J1, J2]
	[PC] += 1
		D D D Destination register
		0 0 0	A
		0 0 1	B
		0 1 0	C
		0 1 1	D
		1 0 0	X
		1 0 1	Y
		1 1 0	J1
		1 1 1	J2	

set-8
	1 0 1 0 0 D D D    V V V V V V V V
	[VVVV VVVV] -> [A, B, C, D, X, Y, M1, M2]
	[PC] += 2 
	D D D Destination register
		0 0 0	A
		0 0 1	B
		0 1 0	C
		0 1 1	D
		1 0 0	X
		1 0 1	Y
		1 1 0	M1
		1 1 1	M2		

alu
	0 1 O O O D D D
	[A, B] -> [J1, J2, C, D, X, Y, M1, M2]
	[PC] += 1
	O O O ALU operation		|	D D D Destination register
		0 0 0 	ADD (A, B)	|	0 0 0	J1
		0 0 1 	INC (A)		|	0 0 1	J2
		0 1 0 	AND (A, B)	|	0 1 0	C
		0 1 1 	OR  (A, B)	|	0 1 1	D
		1 0 0	XOR (A, B)	|	1 0 0	X
		1 0 1	NOT (A)		|	1 0 1	Y
		1 1 0	SHL (A)		|	1 1 0	M1
		1 1 1	NOP			|	1 1 1	M2

set-16
	1 0 1 1 1 0 D D    V V V V V V V V    V V V V V V V V
	[V V V V V V V V    V V V V V V V V] -> [M, XY, J, AB]
	[PC] += 3 
	D D Destination register
	0 0		M
	0 1		XY
	1 0		J
	1 1		AB (note: not 16-bit register!)	
	

move-16
	1 0 0 0 S S S D
	[PC, INC, J, M, XY, 0xFFFF, 0x0000] -> [PC, XY]
	[PC] += 1
	S S S Source register	| D Destination register
	0 0 0	PC				| 0		PC
	0 0 1	INC				| 1		XY
	0 1 0	J				|
	0 1 1	M				|
	1 0 0	XY				|
	1 0 1	0xFFFF			|
	1 1 0   0x0000			|
	1 1 1	0x0000			|
	
store to memory
	1 0 1 1 0 S S S 
	[A, B, C, D, X, Y, 0xFF, 0x00] -> [mem(M)]
	[PC] += 1
	S S S Source register	
	0 0 0	A			
	0 0 1	B			
	0 1 0	C				
	0 1 1	D				
	1 0 0	X			
	1 0 1	Y		
	1 1 0   0xFF		
	1 1 1	0x00		
	
call
	1 0 1 1 1 1 O O
	[XY] -> PC
	O O Operation
	0 0		call
		[PC] -> [XY]
		[J] -> [PC]
	0 1		return
		[XY] -> [PC]
	1 0 	halt
	1 1		error
		
jump
	1 0 0 1 N Z O S
	N - negate flags
	use this flags
		Z - if zero
		O - if overflow
		S - if sign
	[PC] += 1
	if flag
		[J] -> [PC]
